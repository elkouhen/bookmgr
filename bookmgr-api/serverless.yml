service: bookmgr-api

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  ApiGatewayRestApi: 2htvgji2t2

plugins:
  - serverless-aws-documentation
  - serverless-openapi-documentation
  - serverless-apigateway-plugin
  - serverless-plugin-tables
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-python-requirements

functions:
  get_books:
    handler: handler.get_books
    iamRoleStatementsName: bookmgr-api-get-books-${opt:stage, self:provider.stage}-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/books"
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    events:
      - http:
          path: books
          method: get
          documentation:
            summary: Get Books
            description: Get Books
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: "Book Response"
                responseModels:
                  "application/json": "GetBooksResponse"

resources:
  tables:
    books:
      partitionKey: author
      sortKey: title
      indexes:
        - name: authorByTitleIndex
          partitionKey: author
          sortKey: title

custom:

  models:
    - name: "GetBooksResponse"
      description: "Get Books Response"
      contentType: "application/json"
      schema:
        type: "array"
        items:
          type: "object"
          properties:
            title:
              type: "string"
            author:
              type: "string"

  tables: ${file(config.yml):tables}

  serverless-offline: ${file(config.yml):serverless-offline}

  dynamodb: ${file(config.yml):dynamodb}

  pythonRequirements: ${file(config.yml):pythonRequirements}
